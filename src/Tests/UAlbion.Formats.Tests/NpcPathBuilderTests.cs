using System.Linq;
using UAlbion.Formats.Exporters.Tiled;
using Xunit;

namespace UAlbion.Formats.Tests
{
    public class NpcPathBuilderTests
    {
        static readonly (int x, int y)[] TestWaypoints = {




            (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 29),  (60, 30),  (60, 31),  (60, 32),  (60, 33),  (61, 33),  (62, 33),  (63, 33),  (64, 33),
            (64, 32),  (65, 32),  (66, 32),  (66, 31),  (66, 30),  (66, 29),  (66, 28),  (66, 27),  (66, 26),  (67, 26),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 26),  (68, 26),  (68, 27),  (69, 27),  (70, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (70, 27),  (69, 27),  (68, 27),  (67, 27),  (67, 28),  (67, 29),  (67, 30),  (67, 31),  (67, 32),  (66, 32),  (65, 32),
            (64, 32),  (63, 32),  (62, 32),  (62, 33),  (62, 34),  (62, 35),  (62, 36),  (62, 37),  (62, 38),  (62, 39),  (62, 40),  (62, 41),  (61, 41),  (60, 41),  (59, 41),  (59, 41),  (59, 41),  (59, 41),  (59, 41),  (59, 41),  (59, 41),  (59, 41),  (59, 41),  (59, 41),  (59, 41),  (58, 41),  (57, 41),  (56, 41),  (55, 41),  (54, 41),  (54, 42),  (54, 43),  (54, 44),  (54, 45),  (54, 46),  (55, 46),  (56, 46),  (57, 46),  (57, 47),  (58, 47),  (59, 47),  (60, 47),  (61, 47),  (62, 47),  (63, 47),  (64, 47),  (65, 47),  (66, 47),
            (67, 47),  (68, 47),  (69, 47),  (70, 47),  (70, 46),  (70, 45),  (70, 44),  (71, 44),  (72, 44),  (73, 44),  (74, 44),  (75, 44),  (76, 44),  (77, 44),  (77, 43),  (77, 42),  (77, 41),  (77, 40),  (78, 40),  (79, 40),  (80, 40),  (81, 40),  (82, 40),  (83, 40),  (84, 40),  (85, 40),  (86, 40),  (87, 40),  (88, 40),  (88, 39),  (89, 39),  (90, 39),  (91, 39),  (92, 39),  (93, 39),  (94, 39),  (95, 39),  (95, 40),  (95, 41),  (96, 41),  (97, 41),  (98, 41),  (99, 41),  (100, 41), (101, 41), (101, 42), (101, 43), (102, 43),
            (103, 43), (104, 43), (105, 43), (106, 43), (107, 43), (108, 43), (109, 43), (109, 42), (109, 41), (109, 40), (109, 39), (109, 38), (109, 37), (109, 36), (109, 35), (110, 35), (110, 34), (110, 34), (110, 34), (110, 34), (110, 34), (110, 34), (110, 34), (110, 34), (110, 34), (110, 34), (110, 34), (110, 35), (109, 35), (108, 35), (108, 34), (108, 33), (108, 32), (108, 31), (108, 30), (107, 30), (107, 29), (107, 28), (106, 28), (105, 28), (104, 28), (104, 27), (104, 26), (104, 25), (104, 24), (104, 23), (104, 22), (104, 21),
            (104, 20), (104, 19), (105, 19), (106, 19), (107, 19), (108, 19), (109, 19), (110, 19), (111, 19), (112, 19), (113, 19), (114, 19), (114, 20), (114, 21), (114, 22), (114, 23), (114, 24), (114, 24), (114, 24), (114, 24), (114, 24), (114, 24), (114, 24), (114, 24), (114, 24), (114, 24), (114, 24), (114, 23), (114, 22), (114, 21), (114, 20), (114, 19), (114, 19), (114, 19), (114, 19), (114, 19), (114, 19), (114, 19), (114, 19), (114, 19), (114, 19), (114, 19), (113, 19), (112, 19), (111, 19), (110, 19), (109, 19), (108, 19),
            (107, 19), (106, 19), (106, 20), (106, 21), (105, 21), (104, 21), (104, 22), (104, 23), (104, 24), (104, 25), (104, 26), (104, 27), (104, 28), (104, 29), (104, 30), (105, 30), (106, 30), (106, 31), (106, 32), (105, 32), (104, 32), (103, 32), (103, 32), (103, 32), (103, 32), (103, 32), (103, 32), (103, 32), (103, 32), (103, 32), (103, 32), (103, 32), (104, 32), (105, 32), (106, 32), (106, 33), (106, 34), (107, 34), (108, 34), (108, 35), (108, 36), (108, 37), (108, 38), (109, 38), (109, 39), (109, 40), (109, 41), (109, 42),
            (109, 43), (109, 44), (109, 45), (110, 45), (111, 45), (112, 45), (113, 45), (114, 45), (115, 45), (116, 45), (117, 45), (118, 45), (119, 45), (120, 45), (120, 46), (120, 47), (121, 47), (122, 47), (123, 47), (124, 47), (125, 47), (126, 47), (127, 47), (128, 47), (129, 47), (130, 47), (130, 48), (130, 49), (130, 50), (130, 51), (130, 52), (131, 52), (132, 52), (132, 53), (132, 54), (132, 55), (132, 56), (132, 57), (132, 58), (132, 59), (132, 60), (133, 60), (134, 60), (135, 60), (136, 60), (137, 60), (138, 60), (139, 60),
            (140, 60), (140, 61), (141, 61), (141, 61), (141, 61), (141, 61), (141, 61), (141, 61), (141, 61), (141, 61), (141, 61), (141, 61), (141, 61), (140, 61), (139, 61), (138, 61), (138, 62), (138, 63), (138, 64), (138, 65), (138, 66), (139, 66), (140, 66), (141, 66), (142, 66), (143, 66), (143, 67), (143, 67), (143, 67), (143, 66), (143, 66), (143, 66), (143, 66), (143, 66), (143, 66), (143, 66), (143, 66), (143, 66), (143, 66), (143, 66), (142, 66), (141, 66), (140, 66), (139, 66), (138, 66), (137, 66), (136, 66), (136, 65),
            (136, 64), (136, 63), (136, 62), (136, 61), (136, 60), (136, 59), (136, 58), (136, 57), (135, 57), (134, 57), (134, 56), (134, 55), (134, 54), (134, 53), (134, 52), (134, 51), (134, 50), (133, 50), (132, 50), (131, 50), (130, 50), (130, 49), (130, 48), (130, 47), (129, 47), (128, 47), (127, 47), (127, 48), (126, 48), (125, 48), (124, 48), (123, 48), (122, 48), (121, 48), (120, 48), (119, 48), (119, 47), (118, 47), (117, 47), (116, 47), (115, 47), (114, 47), (113, 47), (112, 47), (112, 48), (112, 49), (112, 50), (112, 51),
            (112, 52), (111, 52), (110, 52), (110, 53), (110, 54), (110, 55), (110, 56), (110, 57), (110, 58), (110, 59), (110, 60), (111, 60), (112, 60), (113, 60), (114, 60), (115, 60), (115, 61), (115, 62), (116, 62), (117, 62), (118, 62), (119, 62), (120, 62), (120, 63), (120, 63), (120, 62), (120, 62), (120, 62), (120, 62), (120, 62), (120, 62), (120, 62), (120, 62), (120, 62), (120, 62), (120, 62), (119, 62), (118, 62), (117, 62), (116, 62), (115, 62), (115, 61), (116, 61), (117, 61), (118, 61), (118, 61), (118, 61), (118, 61),
            (118, 61), (118, 61), (118, 61), (118, 61), (118, 61), (118, 61), (118, 61), (117, 61), (116, 61), (115, 61), (114, 61), (113, 61), (112, 61), (111, 61), (110, 61), (109, 61), (109, 62), (109, 63), (109, 64), (109, 65), (108, 65), (107, 65), (106, 65), (106, 65), (106, 65), (106, 65), (106, 65), (106, 65), (106, 65), (106, 65), (106, 65), (106, 65), (106, 65), (106, 66), (106, 67), (106, 68), (106, 69), (105, 69), (104, 69), (103, 69), (102, 69), (101, 69), (100, 69), (100, 68), (100, 67), (100, 66), (100, 65), (100, 64),
            (100, 63), (101, 63), (102, 63), (103, 63), (104, 63), (104, 62), (104, 61), (104, 60), (104, 59), (103, 59), (103, 58), (103, 57), (103, 56), (102, 56), (101, 56), (100, 56), (101, 56), (102, 56), (103, 56), (103, 57), (103, 58), (103, 59), (104, 59), (105, 59), (106, 59), (107, 59), (108, 59), (108, 58), (108, 57), (109, 57), (109, 56), (109, 55), (109, 54), (109, 53), (109, 52), (109, 51), (109, 50), (109, 49), (109, 48), (109, 47), (109, 47), (109, 46), (109, 45), (109, 44), (110, 44), (110, 43), (110, 42), (110, 41),
            (110, 40), (110, 39), (110, 38), (110, 37), (110, 36), (110, 35), (109, 35), (108, 35), (108, 34), (108, 33), (108, 32), (108, 31), (109, 31), (110, 31), (110, 30), (111, 30), (112, 30), (113, 30), (113, 29), (113, 28), (113, 27), (112, 27), (111, 27), (111, 26), (111, 25), (111, 25), (111, 25), (111, 25), (111, 25), (111, 25), (111, 25), (111, 25), (111, 25), (111, 25), (111, 25), (111, 25), (111, 24), (111, 23), (111, 22), (111, 21), (111, 20), (111, 19), (112, 19), (113, 19), (114, 19), (115, 19), (116, 19), (117, 19),
            (118, 19), (119, 19), (120, 19), (120, 19), (120, 19), (121, 19), (122, 19), (122, 19), (122, 19), (122, 20), (122, 21), (122, 22), (122, 23), (122, 24), (122, 25), (122, 26), (122, 27), (122, 28), (122, 29), (123, 29), (124, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (125, 29), (126, 29), (127, 29), (127, 30), (127, 31), (127, 32), (127, 33), (127, 33), (127, 33), (127, 32), (127, 31), (126, 31), (125, 31), (124, 31), (124, 30),
            (123, 30), (122, 30), (121, 30), (120, 30), (119, 30), (118, 30), (117, 30), (117, 31), (117, 32), (117, 33), (117, 34), (117, 35), (117, 36), (117, 37), (117, 38), (117, 39), (116, 39), (115, 39), (114, 39), (113, 39), (112, 39), (111, 39), (110, 39), (110, 40), (110, 41), (110, 42), (110, 43), (110, 44), (110, 45), (109, 45), (108, 45), (107, 45), (106, 45), (105, 45), (104, 45), (103, 45), (102, 45), (101, 45), (100, 45), (99, 45),  (98, 45),  (97, 45),  (96, 45),  (95, 45),  (94, 45),  (94, 44),  (94, 43),  (94, 42),
            (93, 42),  (92, 42),  (91, 42),  (90, 42),  (89, 42),  (88, 42),  (87, 42),  (86, 42),  (85, 42),  (84, 42),  (83, 42),  (82, 42),  (81, 42),  (80, 42),  (80, 41),  (80, 40),  (80, 39),  (79, 39),  (78, 39),  (77, 39),  (76, 39),  (75, 39),  (75, 40),  (75, 41),  (74, 41),  (73, 41),  (72, 41),  (71, 41),  (70, 41),  (69, 41),  (69, 40),  (68, 40),  (68, 41),  (67, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (66, 41),  (65, 41),  (64, 41),
            (63, 41),  (62, 41),  (62, 40),  (62, 39),  (62, 38),  (62, 37),  (62, 36),  (62, 35),  (62, 34),  (62, 33),  (62, 32),  (63, 32),  (64, 32),  (65, 32),  (66, 32),  (67, 32),  (67, 31),  (67, 30),  (67, 29),  (67, 28),  (67, 27),  (68, 27),  (68, 27),  (68, 27),  (68, 27),  (67, 27),  (67, 26),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 25),  (67, 26),  (66, 26),  (65, 26),  (64, 26),  (64, 26),  (64, 26),  (64, 26),  (65, 26),  (66, 26),  (67, 26),
            (68, 26),  (68, 27),  (69, 27),  (70, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (71, 27),  (70, 27),  (71, 27),  (71, 27),  (70, 27),  (69, 27),  (68, 27),  (67, 27),  (67, 28),  (67, 29),  (67, 30),  (67, 31),  (67, 32),  (66, 32),  (65, 32),  (64, 32),  (63, 32),  (62, 32),  (61, 32),  (60, 32),  (60, 31),  (60, 30),  (60, 29),  (59, 29),  (59, 30),  (58, 30),  (57, 30),  (56, 30),  (55, 30),  (55, 30),  (55, 30),  (55, 30),  (56, 30),  (57, 30),  (57, 29),  (57, 28),  (58, 28),  (59, 28),  (60, 28),
            (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28),  (60, 28)
        };

        [Fact]
        public void RoundTripTest() => RoundTrip(TestWaypoints);

        [Fact]
        public void SinglePoint()
        {
            var path = new (int x, int y)[] { (0, 0) };
            var waypoints = NpcPathBuilder.IdentifyWaypoints(path, p => (p.x, p.y)).ToList();
            Assert.NotNull(waypoints);
            Assert.Collection(waypoints, i => Assert.Equal(0, i));

            var combined = NpcPathBuilder.CombineRuns(path, p => (p.x, p.y)).ToList();
            Assert.NotNull(combined);
            Assert.Collection(combined, x => Assert.Equal((0, 0, 0), x));

            RoundTrip(path);
        }

        [Fact]
        public void Waiting()
        {
            var path = new (int x, int y)[]
            {
                (0, 0), (0, 0), (0, 0), (0, 0), (0, 0),
                (0, 0), (0, 0), (0, 0), (0, 0), (0, 0),
                (0, 0)
            };
            var waypoints = NpcPathBuilder.IdentifyWaypoints(path, p => (p.x, p.y)).ToList();
            Assert.NotNull(waypoints);
            Assert.Collection(waypoints,
                i => Assert.Equal(0, i),
                i => Assert.Equal(10, i)
            );

            var combined = NpcPathBuilder.CombineRuns(path, p => (p.x, p.y)).ToList();
            Assert.NotNull(combined);
            Assert.Collection(combined, x => Assert.Equal((0, 0, 0), x));
            RoundTrip(path);
        }

        [Fact]
        public void Horizontal()
        {
            var path = new (int x, int y)[]
            {
                (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)
            };

            var waypoints = NpcPathBuilder.IdentifyWaypoints(path, p => (p.x, p.y)).ToList();
            Assert.NotNull(waypoints);
            Assert.Collection(waypoints,
                i => Assert.Equal(0, i),
                i => Assert.Equal(6, i)
            );

            var combined = NpcPathBuilder.CombineRuns(path, p => (p.x, p.y)).ToList();
            Assert.NotNull(combined);
            Assert.Collection(combined,
               x => Assert.Equal((0, 0, 0), x),
               x => Assert.Equal((6, 6, 0), x));

            RoundTrip(path);
        }

        [Fact]
        public void Corner()
        {
            var path = new (int x, int y)[]
            {
                (0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (3, 2), (3, 3)
            };

            var waypoints = NpcPathBuilder.IdentifyWaypoints(path, p => (p.x, p.y)).ToList();
            Assert.NotNull(waypoints);
            Assert.Collection(waypoints,
                i => Assert.Equal(0, i),
                i => Assert.Equal(3, i),
                i => Assert.Equal(6, i)
            );

            var combined = NpcPathBuilder.CombineRuns(path, p => (p.x, p.y)).ToList();
            Assert.NotNull(combined);
            Assert.Collection(combined,
               x => Assert.Equal((0, 0, 0), x),
               x => Assert.Equal((3, 3, 0), x),
               x => Assert.Equal((6, 3, 3), x));

            RoundTrip(path);
        }

        [Fact]
        public void CornerWithWait()
        {
            var path = new (int x, int y)[]
            {
                (0, 0), // 0*
                (1, 0), // 1
                (2, 0), // 2
                (3, 0), // 3*
                (3, 0), // 4
                (3, 0), // 5
                (3, 0), // 6
                (3, 1), // 7
                (3, 2), // 8
                (3, 3)  // 9*
            };

            var waypoints = NpcPathBuilder.IdentifyWaypoints(path, p => (p.x, p.y)).ToList();
            Assert.NotNull(waypoints);
            Assert.Collection(waypoints,
                i => Assert.Equal(0, i),
                i => Assert.Equal(3, i),
                i => Assert.Equal(6, i),
                i => Assert.Equal(9, i)
            );

            var combined = NpcPathBuilder.CombineRuns(path, p => (p.x, p.y)).ToList();
            Assert.NotNull(combined);
            Assert.Collection(combined,
               x => Assert.Equal((0, 0, 0), x),
               x => Assert.Equal((3, 3, 0), x),
               x => Assert.Equal((9, 3, 3), x));

            RoundTrip(path);
        }

        [Fact]
        public void Zigzag()
        {
            var path = new (int x, int y)[]
            {
                (0, 0), (1, 0), (1, 1), (2, 1), (2, 2), (3, 2), (3, 3)
            };

            var waypoints = NpcPathBuilder.IdentifyWaypoints(path, p => (p.x, p.y)).ToList();
            Assert.NotNull(waypoints);
            Assert.Collection(waypoints,
                i => Assert.Equal(0, i),
                i => Assert.Equal(1, i),
                i => Assert.Equal(2, i),
                i => Assert.Equal(3, i),
                i => Assert.Equal(4, i),
                i => Assert.Equal(5, i),
                i => Assert.Equal(6, i)
            );

            var combined = NpcPathBuilder.CombineRuns(path, p => (p.x, p.y)).ToList();
            Assert.NotNull(combined);
            Assert.Collection(combined,
                x => Assert.Equal((0, 0, 0), x),
                x => Assert.Equal((1, 1, 0), x),
                x => Assert.Equal((2, 1, 1), x),
                x => Assert.Equal((3, 2, 1), x),
                x => Assert.Equal((4, 2, 2), x),
                x => Assert.Equal((5, 3, 2), x),
                x => Assert.Equal((6, 3, 3), x));

            RoundTrip(path);
        }

        static void RoundTrip((int x, int y)[] path)
        {
            var combined = NpcPathBuilder.CombineRuns(path, p => (p.x, p.y));
            var reconstructed = NpcPathBuilder.FollowRuns(combined).ToArray();
            //Assert.Equal(path.Length, reconstructed.Length);
            //for (int i = 0; i < path.Length; i++)
            //    Assert.Equal(path[i], reconstructed[i]);
        }
    }
}